{"ast":null,"code":"var _jsxFileName = \"G:\\\\Programs\\\\xampp\\\\htdocs\\\\kayleagray_react\\\\src\\\\pages\\\\DigitalProgramming.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport PlaylistComponent from \"./Playlist/PlaylistComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DigitalProgramming() {\n  _s();\n  const [playlists, setPlaylists] = useState([]);\n  const [isFetched, setIsFetched] = useState(false);\n  async function fetchPlaylists() {\n    if (isFetched === false) {\n      fetch(\"http://localhost:3030/youtube/playlists\").then(res => res.json()).then(result => {\n        if (result) {\n          var parsed = JSON.parse(JSON.stringify(result));\n          setPlaylists(parsed);\n          //console.log(result);\n          //setPlaylists(JSON.parse(result));\n          setIsFetched(true);\n          console.log(\"I am here more often than i should.\");\n          //console.log(result);\n        }\n      }, error => {\n        throw Error(error);\n      });\n    }\n  }\n\n  // function ShowPlaylists({playlistsData})\n  // {\n  //     const playlistComponents = [];\n\n  //     console.log(playlistsData);\n\n  //     playlistComponents.forEach(element => {\n  //         playlistComponents.push(<PlaylistComponent data={element} key={element.id} />)\n  //     });\n  //     return {playlistComponents};\n  // }\n  useEffect(() => {\n    fetchPlaylists();\n  }, []);\n  if (isFetched) {\n    // const parsedPlaylists = Object.entries(playlists.Playlists);\n    // const PlaylistComponents = parsedPlaylists.map(element => (\n    //     console.log(element)\n    //     //<PlaylistComponent data={element} key={element.id} />\n    //     ));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"DigitalProgramming\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Digital Programming Page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(DigitalProgramming, \"dyFvu0HyfFNvvGEF0CGcti7MU58=\");\n_c = DigitalProgramming;\nexport default DigitalProgramming;\nvar _c;\n$RefreshReg$(_c, \"DigitalProgramming\");","map":{"version":3,"names":["React","useEffect","useState","PlaylistComponent","jsxDEV","_jsxDEV","DigitalProgramming","_s","playlists","setPlaylists","isFetched","setIsFetched","fetchPlaylists","fetch","then","res","json","result","parsed","JSON","parse","stringify","console","log","error","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["G:/Programs/xampp/htdocs/kayleagray_react/src/pages/DigitalProgramming.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport PlaylistComponent from \"./Playlist/PlaylistComponent\";\r\n\r\nfunction DigitalProgramming() {\r\n\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [isFetched, setIsFetched] = useState(false);\r\n\r\n    async function fetchPlaylists() {\r\n        if (isFetched === false) {\r\n            fetch(\"http://localhost:3030/youtube/playlists\")\r\n                .then(res => res.json())\r\n                .then((result) => {\r\n                    if (result) {\r\n                        var parsed = JSON.parse(JSON.stringify(result));\r\n                        setPlaylists(parsed);\r\n                        //console.log(result);\r\n                        //setPlaylists(JSON.parse(result));\r\n                        setIsFetched(true);\r\n                        console.log(\"I am here more often than i should.\")\r\n                        //console.log(result);\r\n                    }\r\n                }, (error) => {\r\n                    throw Error(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    // function ShowPlaylists({playlistsData})\r\n    // {\r\n    //     const playlistComponents = [];\r\n\r\n    //     console.log(playlistsData);\r\n\r\n    //     playlistComponents.forEach(element => {\r\n    //         playlistComponents.push(<PlaylistComponent data={element} key={element.id} />)\r\n    //     });\r\n    //     return {playlistComponents};\r\n    // }\r\n    useEffect(() => {\r\n        fetchPlaylists();\r\n    }, [])\r\n\r\n    if (isFetched) {\r\n        // const parsedPlaylists = Object.entries(playlists.Playlists);\r\n        // const PlaylistComponents = parsedPlaylists.map(element => (\r\n        //     console.log(element)\r\n        //     //<PlaylistComponent data={element} key={element.id} />\r\n        //     ));\r\n        return (\r\n            <div className=\"DigitalProgramming\">\r\n                <h1> Digital Programming Page </h1>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DigitalProgramming;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAE1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjD,eAAeU,cAAcA,CAAA,EAAG;IAC5B,IAAIF,SAAS,KAAK,KAAK,EAAE;MACrBG,KAAK,CAAC,yCAAyC,CAAC,CAC3CC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAAEG,MAAM,IAAK;QACd,IAAIA,MAAM,EAAE;UACR,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,MAAM,CAAC,CAAC;UAC/CR,YAAY,CAACS,MAAM,CAAC;UACpB;UACA;UACAP,YAAY,CAAC,IAAI,CAAC;UAClBW,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClD;QACJ;MACJ,CAAC,EAAGC,KAAK,IAAK;QACV,MAAMC,KAAK,CAACD,KAAK,CAAC;MACtB,CAAC,CAAC;IACV;EACJ;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACAvB,SAAS,CAAC,MAAM;IACZW,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,SAAS,EAAE;IACX;IACA;IACA;IACA;IACA;IACA,oBACIL,OAAA;MAAKqB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eAC/BtB,OAAA;QAAAsB,QAAA,EAAI;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElC,CAAC;EAEd;AACJ;AAACxB,EAAA,CArDQD,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AAuD3B,eAAeA,kBAAkB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}